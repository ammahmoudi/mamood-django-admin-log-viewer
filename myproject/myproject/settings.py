"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-ga-owvj40py$phh*k8m&udawx&0$tuya10b_=(apwxs4qa_ujm'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'mamood_django_admin_log_viewer',  # Add the log viewer app
    'testapp',  # Add our test app
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'mamood_django_admin_log_viewer.middleware.LogViewerLoggingMiddleware',  # Add this to suppress log viewer AJAX logging
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'myproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'myproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Log viewer settings

# Create logs directory
LOG_DIR = BASE_DIR / 'logs'
LOG_DIR.mkdir(exist_ok=True)

LOG_VIEWER_FILES = ['django.log', 'application.log','celery_beat.log']
LOG_VIEWER_FILES_DIR = LOG_DIR
LOG_VIEWER_PAGE_LENGTH = 25       # total log lines per-page
LOG_VIEWER_MAX_READ_LINES = 1000  # total log lines will be read
LOG_VIEWER_FILE_LIST_MAX_ITEMS_PER_PAGE = 25 # Max log files loaded per page
LOG_VIEWER_EXCLUDE_TEXT_PATTERN = None  # String regex expression to exclude log lines
LOG_VIEWER_FILE_LIST_TITLE = "Django Log Viewer"
LOGVIEWER_REFRESH_INTERVAL = 1000  # 30 seconds - much more reasonable!
LOGVIEWER_INITIAL_NUMBER_OF_CHARS = 2048
LOGVIEWER_ONLY_REFRESH_WHEN_ACTIVE = True  # Only refresh when tab is visible
LOGVIEWER_DISABLE_ACCESS_LOGS = True  # Don't log AJAX requests to prevent log spam
LOGVIEWER_AUTO_REFRESH_DEFAULT = True  # Auto-refresh enabled by default for real-time monitoring
LOGVIEWER_AUTO_SCROLL_TO_BOTTOM = True  # Automatically scroll to latest logs for real-time monitoring

# Construct proper log file paths
LOGVIEWER_LOGS = [os.path.join(LOG_DIR, file) for file in LOG_VIEWER_FILES]

# Log format parsing configuration
LOG_VIEWER_FORMATS = {
    'django_default': {
        'pattern': r'(?P<level>\w+)\s+(?P<timestamp>\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2},\d+)\s+(?P<module>[\w\.]+):\s*(?P<message>.*)',
        'timestamp_format': '%Y-%m-%d %H:%M:%S,%f',
        'description': 'Django default format: LEVEL YYYY-MM-DD HH:MM:SS,mmm module: message'
    },
    'simple': {
        'pattern': r'(?P<level>\w+):\s*(?P<message>.*)',
        'timestamp_format': None,
        'description': 'Simple format: LEVEL: message'
    },
    'celery_beat': {
        'pattern': r'(?P<level>\w+)\s+(?P<timestamp>\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2},\d+)\s+(?P<module>[\w\.]+):\s*(?P<message>.*)',
        'timestamp_format': '%Y-%m-%d %H:%M:%S,%f',
        'description': 'Celery Beat format: INFO YYYY-MM-DD HH:MM:SS,mmm celery.beat: message'
    }
}

# Default log format to use
LOG_VIEWER_DEFAULT_FORMAT = 'django_default'

# Per-file format overrides
LOG_VIEWER_FILE_FORMATS = {
    'django.log': 'django_default',
    'application.log': 'simple',
    'celery_beat.log': 'celery_beat',
}

# Custom log level colors
LOG_VIEWER_LEVEL_COLORS = {
    'DEBUG': '#6c757d',    # Gray
    'INFO': '#0dcaf0',     # Cyan
    'WARNING': '#ffc107',  # Yellow
    'WARN': '#ffc107',     # Yellow (alias)
    'ERROR': '#dc3545',    # Red
    'CRITICAL': '#6f42c1', # Purple
    'FATAL': '#6f42c1',    # Purple (alias)
}

# Configure Django logging to write to our log files
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module}: {message}',
            'style': '{',
        },
    },
    'handlers': {
        'django_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': LOG_DIR / 'django.log',
            'formatter': 'verbose',
        },
        'app_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': LOG_DIR / 'application.log',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console', 'django_file'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['django_file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
        'myproject': {  # Your app's logger
            'handlers': ['app_file', 'console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}
